

router.post("/signup",signupCheck, (req, res) => {
  console.log("signup routes hit");
  userController.signupFunc(req, res);
});
router.post("/login",signupCheck, (req,res) => {
  console.log("login routes hit");
  userController.loginFunc(req, res);
})
router.post("/create",auth, (req, res) => {
  console.log("create todo routes hit");
  userController.createTodo(req, res);
});
router.get("/read", auth, (req, res) => {
  console.log("read todo routes hit");
  userController.readTodo(req, res);
});
router.post("/update", auth, (req, res) => {
  console.log("update todo routes hit");
  userController.updateTodo(req, res);
});
router.get("/delete", auth, (req, res) => {
  console.log("delete todo routes hit");
  userController.deleteTodo(req, res);
});
router.get("/deleteall", auth, (req, res) => {
  console.log("deleteall todo routes hit");
  userController.deleteAllTodo(req, res);
});


// const express = require('express');
// const router = express.Router();

////////////////////USER CREDENTIALS////////////////////

{
  "dbUser": {
    "_id": "6576f6764f6a6132c42958aa",
    "email": "john@email.com",
    "password": "secret123",
    "__v": 0
  },
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NTc2ZjY3NjRmNmE2MTMyYzQyOTU4YWEiLCJpYXQiOjE3MDIyOTY1ODUsImV4cCI6MTcwMjkwMTM4NX0.9ROwLKfJWb0cECDukEbRmAjTiC6wkc9l-kI4_TU4D8o"
}
/////
{
  "dbUser": {
    "_id": "6576f6b44f6a6132c42958ac",
    "email": "testuser@gmail.com",
    "password": "testuser",
    "__v": 0
  },
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NTc2ZjZiNDRmNmE2MTMyYzQyOTU4YWMiLCJpYXQiOjE3MDIyOTY3MzYsImV4cCI6MTcwMjkwMTUzNn0.-ruEucql6p13g1y4LzHWiY9RiXnNVAB-YZJKYEaWsNg"
}

////////////////////OWNER CREDENTIALS////////////////////
{ 
  "dbOwner": {
    "_id": "659bf173d08913bbf062925c",
    "email": "owner@example.com",
    "password": "Owner@123",
  },
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lcklkIjoiNjU5YmYxNzNkMDg5MTNiYmYwNjI5MjVjIiwiaWF0IjoxNzA1NDgwMjE3LCJleHAiOjE3MDYwODUwMTd9.tYhMzT0EvWx9b1bwtVhZTBuZc0eG9PcmnZB0TbKtuOc"
}
/////
{ 
  "dbOwner": {
    "_id": "659d408fc50f1005ded92970",
    "email": "owner4@example.com",
    "password": "Owner@123",
  },
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJvd25lcklkIjoiNjU5ZDQwOGZjNTBmMTAwNWRlZDkyOTcwIiwiaWF0IjoxNzA1NDc1NTgzLCJleHAiOjE3MDYwODAzODN9.d263_zH4MZCHIoignPIz1gU_o7vtS9gdXxiZ2Fn6JZo"
}

VVVVVVVVVVVVVVVVVVVVVVVVVVVVVV    [mui -table]
import Dialog from "@mui/material/Dialog";
import DialogActions from "@mui/material/DialogActions";
import DialogContent from "@mui/material/DialogContent";
import DialogContentText from "@mui/material/DialogContentText";
import DialogTitle from "@mui/material/DialogTitle";
import Slide from "@mui/material/Slide";
import { TransitionProps } from "@mui/material/transitions";
import Button from "@mui/material/Button";
import { ToastContainer, toast } from "react-toastify";
import { Helmet } from "react-helmet";
import React, { useState, FC, useEffect } from "react";
import { useLocation } from "react-router-dom";
import ButtonPrimary from "shared/Button/ButtonPrimary";
import axios from "axios";
import { API_URL } from "../../api/config";
import Box from "@mui/material/Box";
import { DataGrid, GridColDef } from "@mui/x-data-grid";
import Action from "./Action";

const getRowId = (row: Property) => row._id;
interface Property {
  _id: string;
  title: string;
  address: string;
  price: number;
}
export interface ListingStayPageProps {
  className?: string;
}

const ListingStayPage: FC<ListingStayPageProps> = ({ className = "" }) => {
  const [currentProp, setCurrentProp] = useState({});

  const [propertyData, setPropertyData] = useState<any>([]);

  const getPropertyData = async () => {
    const token = localStorage.getItem("token");
    try {
      const response = await axios.get(
        `${API_URL}/property/get-owner-property`,
        {
          headers: {
            token: token,
          },
        }
      );
      if (response.data.error === false) {
        const property = response.data.propertydata;
        setPropertyData(property);
      }
      // Set loading to false when data is successfully loaded
    } catch (err) {
      console.error("error while fetching properties data", err);
    }
  };

  const locationPathName = useLocation().pathname;
  useEffect(() => {
    getPropertyData();
  }, [locationPathName]);
  const [openDialog, setOpenDailog] = useState(false);

  const handleCloseDialog = () => {
    setOpenDailog(false);
  };

  const deleteProperty = async (currentProp: any) => {
    const token = localStorage.getItem("token");
    try {
      const response = await axios.get(
        `${API_URL}/property/delete-property?propId=${currentProp.row._id}`,
        {
          headers: {
            token: token,
          },
        }
      );
      const text = response.data.message;
      if (response.data.error === false) {
        toast.success(text, {
          position: "top-center",
          autoClose: 1000,
          closeOnClick: true,
          progress: undefined,
          theme: "light",
        });
        getPropertyData();
      }
      if (response.data.error === true) {
        toast.error(text, {
          position: "top-center",
          autoClose: 2000,
          hideProgressBar: true,
          closeOnClick: true,
          progress: undefined,
          theme: "light",
        });
      }
      handleCloseDialog();
      // Set loading to false when data is successfully loaded
    } catch (err) {
      console.error("error while fetching properties data", err);
      handleCloseDialog();
      console.log(err, "not deleted");
    }
  };

 const options = {
   filterType: "dropdown",
   responsive: "vertical",
   print: true,
   rowsPerPage: 10,
   page: 0,
 };

  const columns: GridColDef[] = [
    {
      field: "title",
      headerName: "Title",
      width: 500,
    },
    {
      field: "address",
      headerName: "Last name",
      width: 300,
    },
    {
      field: "price",
      headerName: "Price",
      type: "number",
      width: 150,
    },
    {
      field: "Actions",
      headerName: "Actions",
      type: "number",
      width: 180,
      renderCell: (params: any) => (
        <>
          <Action
            property={params}
            setOpenDialog={setOpenDailog}
            currentProp={setCurrentProp}
          />
        </>
      ),
    },
  ];

  return (
    <div
      className={`nc-ListingStayPage relative overflow-hidden ${className}`}
      data-nc-id="ListingStayPage"
    >
      <ToastContainer
        position="top-center"
        autoClose={2000}
        hideProgressBar={true}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
        theme="light"
      />
      <Helmet>
        <title>Chisfis || Booking React Template</title>
      </Helmet>
      <div className="listingSection__wrap" style={{ transform: "scale(0.9)" }}>
        {/* HEADING */}
        <div>
          <div className="flex justify-between mt-4">
            <h2 className="text-2xl font-semibold">Properties</h2>
            <ButtonPrimary href="/add-listing-1">Add Property</ButtonPrimary>
          </div>
        </div>
        <Box sx={{ height: "auto", width: "auto" }}>
          <DataGrid
            rows={propertyData}
            columns={columns}
            getRowId={getRowId}
            initialState={{
              pagination: {
                paginationModel: {
                  pageSize: 5,
                },
              },
            }}
            pageSizeOptions={[5]}
            disableRowSelectionOnClick
          />
        </Box>
      </div>
      <Dialog
        open={openDialog}
        onClose={handleCloseDialog}
      >
        <DialogTitle>{"Delete"}</DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-slide-description">
            Are you sure, you want to delete this Property?
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog}>Cancel</Button>
          <ButtonPrimary onClick={() => deleteProperty(currentProp)}>
            Delete
          </ButtonPrimary>
        </DialogActions>
      </Dialog>
    </div>
  );
};

        customBodyRenderLite: (dataIndex: any, rowIndex: any) => (
          <div style={{ textAlign: "center" }}>
            {propertyData[dataIndex].price}
          </div>
        ),
export default ListingStayPage;